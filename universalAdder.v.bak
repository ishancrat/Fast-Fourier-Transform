module universalAdder(sum,input1,input2);
input [31:0]input1,input2;
output reg [31:0]sum;

reg [7:0]exponent1,exponent2,exponentOut;
reg [7:0]expDiff;
reg ov;
reg [23:0]mantissa1,mantissa2,mantissaOut;


always @(input1 or input2) 
begin
	mantissa1 = {1'b1,input1[22:0]};
	mantissa2 = {1'b1,input2[22:0]};
	exponent1 = input1[30:23];
	exponent2 = input2[30:23];
	
	if (exponent1 > exponent2)
	begin
		exponentOut = exponent1;
		expDiff = exponent1 - exponent2;
		mantissa2 = mantissa2 >> expDiff;
	end
	else
	begin
		exponentOut = exponent2;
		expDiff = exponent2 - exponent1;
		mantissa1 = mantissa1 >> expDiff;
	end
	
	{ov,mantissaOut} = (input1[31] ~^ input2[31])?(mantissa1 + mantissa2) : ((mantissa1 > mantissa2)?mantissa1 - mantissa2 : mantissa2 - mantissa1);
	//above line -> if same sign then add, if different sign, then subtract smaller mantissa from larger one
	sum[31] = (input1[31] ~^ input2[31])?input1[31]:((mantissa1 > mantissa2)?input1[31]:input2[31]);
	//similarly for the signed bit
			 
   if ((input1[31] ^ input2[31]) && mantissaOut[23]==0) //normalization if subtraction is performed
	begin
		mantissaOut = mantissaOut <<1;
		exponentOut = exponentOut - 1;
	end
	
	if (ov==1 && (input1[31] ~^ input2[31])) //normalization if addition is performed
	begin
		exponentOut = exponentOut + 1;
		mantissaOut = mantissaOut >> 1;
	end

	sum[30:0] = {exponentOut,mantissaOut[22:0]};
	
end

endmodule